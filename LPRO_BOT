import os
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Загружаем переменные окружения из .env файла
load_dotenv()

# Получаем токены из переменных окружения
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
YANDEX_DISK_TOKEN = os.getenv('YANDEX_DISK_TOKEN')

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Привет! Напиши мне запрос для поиска фотографий на Яндекс.Диске.')

def search_photos(query: str):
    headers = {
        'Authorization': f'OAuth {YANDEX_DISK_TOKEN}',
    }
    url = 'https://cloud-api.yandex.net/v1/disk/resources/search'
    params = {
        'query': query,
        'media_type': 'image',
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json().get('items', [])
    else:
        return []

def handle_message(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    photos = search_photos(query)

    if photos:
        for photo in photos:
            update.message.reply_text(photo['file'] + '\n')  # Отправляем ссылку на фото
    else:
        update.message.reply_text('Ничего не найдено.')

def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
